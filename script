import sys

# --- Call check_achievements and check_quests in key places ---
# Example: after a win in start_battle()
# ...existing code...
# if enemy_hp <= 0:
#     print("You defeated the enemy!")
#     coins += 10
#     print("You earned 10 coins!")
#     wins += 1
#     battle_stats[fighter]["wins"] += 1
#     check_achievements()
#     check_quests("win")
#     # ...rest of code...

# Example: after buying a fighter in buy_fighters()
# ...existing code...
# if coins >= price:
#     coins -= price
#     owned_fighters[fighter] = 1
#     battle_stats[fighter] = {"battles": 0, "wins": 0, "losses": 0}
#     print(f"You bought {fighter}!")
#     check_quests("buy_fighter")
# ...rest of code...

# Example: after upgrading an item in upgrade_items()
# ...existing code...
# if coins >= upgrade_cost:
#     owned_items[item] += 1
#     coins -= upgrade_cost
#     print(f"{item} upgraded to level {owned_items[item]}! (Cost: {upgrade_cost} coins)")
#     check_quests("upgrade_item")
# ...rest of code...

# Fighters are stored as a dict: name -> level
owned_fighters = {"Starter": 1}
coins = 20
# Equipped items: fighter name -> item name
equipped_items = {}

# --- Define all_attacks dictionary ---
all_attacks = {
    "Kamehameha": {"power": 50000, "price": 1000, "upgradable": False},
    "Punch": {"power": 500, "price": 50, "upgradable": True},
    "Shadow Slash": {"power": 1000, "price": 200, "upgradable": True},
    "Spirit Bomb": {"power": 2000, "price": 500, "upgradable": True},
}

# --- Define owned_attacks and equipped_attacks dictionaries ---
owned_attacks = {}
equipped_attacks = {}

# --- Define all_items and owned_items dictionaries (if not already defined) ---
all_items = {
    "Sword": {"base_bonus": 2, "price": 30},
    "Shield": {"base_bonus": 3, "price": 40},
    "Armor": {"base_bonus": 5, "price": 60},
}
owned_items = {}

# --- Define all_fighters, fighter_prices, secret_fighter, secret_code, secret_unlocked, sung_guards, battle_stats ---
all_fighters = ["Goku", "Sung Jin Woo", "Naruto", "Luffy", "Ichigo"]
fighter_prices = {"Goku": 100, "Sung Jin Woo": 200, "Naruto": 80, "Luffy": 90, "Ichigo": 85}
secret_fighter = "Sung Jin Woo"
secret_code = "arise"
secret_unlocked = False
sung_guards = set()
battle_stats = {}

# === Achievements System ===
achievements = {
    "First Win": False,
    "Collector": False,
    "Champion": False,
    "Shadow Army": False,
    "Goku God": False,
    "Wealthy": False,
    "Boss Slayer": False,
}

def check_achievements():
    # TODO: Implement achievement logic
    pass

def show_achievements():
    while True:
        print("\n=== Achievements ===")
        for idx, (name, unlocked) in enumerate(achievements.items(), 1):
            status = "Unlocked" if unlocked else "Locked"
            print(f"{idx}. {name}: {status}")
        print("a. View achievement details")
        print("b. Back to menu")
        choice = input("Choose an option: ").strip().lower()
        if choice == "b":
            show_menu()
            return
        elif choice == "a":
            idx = input("Enter achievement number to view details: ")
            if idx.isdigit():
                idx = int(idx)
                if 1 <= idx <= len(achievements):
                    name = list(achievements.keys())[idx-1]
                    print(f"\n{name}:")
                    print(get_achievement_description(name))
                    input("Press Enter to return...")
                else:
                    print("Invalid achievement number.")
            else:
                print("Invalid input.")
        else:
            print("Invalid option.")

def get_achievement_description(name):
    descriptions = {
        "First Win": "Win your first battle.",
        "Collector": "Own 5 different fighters.",
        "Champion": "Win 20 battles.",
        "Shadow Army": "Raise 10 shadow guards with Sung Jin Woo.",
        "Goku God": "Upgrade Goku to level 999.",
        "Wealthy": "Reach 1000 coins.",
        "Boss Slayer": "Defeat 5 bosses.",
    }
    return descriptions.get(name, "No description available.")

# === Quests System ===
quests = [
    {"name": "Win 3 battles", "completed": False, "progress": 0, "goal": 3, "reward": 50},
    {"name": "Buy 2 fighters", "completed": False, "progress": 0, "goal": 2, "reward": 30},
    {"name": "Upgrade an item", "completed": False, "progress": 0, "goal": 1, "reward": 20},
    {"name": "Equip an attack", "completed": False, "progress": 0, "goal": 1, "reward": 15},
]

def check_quests(event=None):
    global coins
    for quest in quests:
        if quest["completed"]:
            continue
        if quest["name"] == "Win 3 battles" and event == "win":
            quest["progress"] += 1
            if quest["progress"] >= quest["goal"]:
                quest["completed"] = True
                print(f"Quest completed: {quest['name']}! Reward: {quest['reward']} coins")
                coins += quest["reward"]
        if quest["name"] == "Buy 2 fighters" and event == "buy_fighter":
            quest["progress"] += 1
            if quest["progress"] >= quest["goal"]:
                quest["completed"] = True
                print(f"Quest completed: {quest['name']}! Reward: {quest['reward']} coins")
                coins += quest["reward"]
        if quest["name"] == "Upgrade an item" and event == "upgrade_item":
            quest["progress"] += 1
            if quest["progress"] >= quest["goal"]:
                quest["completed"] = True
                print(f"Quest completed: {quest['name']}! Reward: {quest['reward']} coins")
                coins += quest["reward"]
        if quest["name"] == "Equip an attack" and event == "equip_attack":
            quest["progress"] += 1
            if quest["progress"] >= quest["goal"]:
                quest["completed"] = True
                print(f"Quest completed: {quest['name']}! Reward: {quest['reward']} coins")
                coins += quest["reward"]

def show_quests():
    while True:
        print("\n=== Quests ===")
        if not quests:
            print("No quests available.")
        else:
            for idx, quest in enumerate(quests, 1):
                status = "Completed" if quest.get("completed") else f"In Progress ({quest.get('progress', 0)}/{quest.get('goal', '?')})"
                print(f"{idx}. {quest.get('name', 'Unknown')} - {status}")
        print("a. View quest details")
        print("b. Claim rewards (if any)")
        print("c. Back to menu")
        choice = input("Choose an option: ").strip().lower()
        if choice == "c":
            show_menu()
            return
        elif choice == "a":
            idx = input("Enter quest number to view details: ")
            if idx.isdigit():
                idx = int(idx)
                if 1 <= idx <= len(quests):
                    quest = quests[idx-1]
                    print(f"\n{quest.get('name', 'Unknown')}:")
                    print(get_quest_description(quest))
                    input("Press Enter to return...")
                else:
                    print("Invalid quest number.")
            else:
                print("Invalid input.")
        elif choice == "b":
            claimed = False
            for quest in quests:
                if quest.get("completed") and not quest.get("claimed", False):
                    print(f"Claimed reward for quest: {quest['name']} (+{quest['reward']} coins)")
                    global coins
                    coins += quest["reward"]
                    quest["claimed"] = True
                    claimed = True
            if not claimed:
                print("No rewards to claim.")
            input("Press Enter to return...")
        else:
            print("Invalid option.")

def get_quest_description(quest):
    return f"Goal: {quest.get('goal', '?')} | Reward: {quest.get('reward', 0)} coins"

# Add a help/about section to the menu
def show_help():
    print("\n=== Help & About ===")
    print("Welcome to the Fighters Game!")
    print("Battle enemies, collect fighters, upgrade items, and complete quests.")
    print("Achievements are unlocked by reaching special milestones.")
    print("Quests give you extra rewards for completing specific tasks.")
    print("Explore the menus to discover all features!")
    print("Created by a guy.")
    input("Press Enter to return to menu...")
    show_menu()

# Update show_menu to include Help/About
def battle_arena_2d():
    print("\n=== 2D Arena Mode ===")
    print("This feature is coming soon!")
    input("Press Enter to return to the menu...")

def show_menu():
    print("\n=== Main Menu ===")
    print("1. Battle")
    print("2. Shop")
    print("3. Fighters")
    print("4. Items")
    print("5. Options")
    print("6. 2D Arena")
    print("7. Achievements")
    print("8. Quests")
    print("9. Help/About")
    print("0. Exit")
    choice = input("Choose an option: ")
    if choice == "1":
        start_battle()
    elif choice == "2":
        open_shop()
    elif choice == "3":
        show_fighters()
    elif choice == "4":
        items_menu()
    elif choice == "5":
        show_options()
    elif choice == "6":
        battle_arena_2d()
        show_menu()
    elif choice == "7":
        show_achievements()
    elif choice == "8":
        show_quests()
    elif choice == "9":
        show_help()
    elif choice == "0":
        print("Goodbye!")
        sys.exit()
    else:
        print("Invalid option. Try again.")
        show_menu()
def choose_fighter():
    print("\nChoose your fighter:")
    for idx, (fighter, level) in enumerate(owned_fighters.items(), 1):
        stats = battle_stats.get(fighter, {"battles": 0, "wins": 0, "losses": 0})
        item = equipped_items.get(fighter, "None")
        attack = equipped_attacks.get(fighter, "None")
        print(f"{idx}. {fighter} (Level {level}) | Item: {item} | Attack: {attack} | Battles: {stats['battles']} | Wins: {stats['wins']} | Losses: {stats['losses']}")
    choice = input("Enter number: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(owned_fighters):
            return list(owned_fighters.keys())[choice-1]
    print("Invalid choice.")
    return choose_fighter()

def start_battle():
    global coins
    fighter = choose_fighter()
    level = owned_fighters[fighter]
    if fighter not in battle_stats:
        battle_stats[fighter] = {"battles": 0, "wins": 0, "losses": 0}
    keep_playing = True
    wins = 0
    losses = 0
    enemy_hp_base = 8
    enemy_attack_base = 2
    boss_count = 0  # Track how many bosses have appeared

    while keep_playing:
        # Boss logic
        if wins > 0 and wins % 3 == 0:
            boss_count += 1
            enemy_hp = 50 + boss_count * 50  # Boss HP increases each time
            enemy_attack = 10 + boss_count * 10  # Boss attack increases each time
            print(f"\n=== BOSS BATTLE #{boss_count}! ===")
            print(f"A powerful boss appears with {enemy_hp} HP and {enemy_attack} attack!")
        else:
            enemy_hp = enemy_hp_base + (wins // 2) * 2
            enemy_attack = enemy_attack_base + (wins // 2)

        # ...rest of your battle code (player_hp, attack_power, etc.)...
        # Sung Jin Woo logic
        if fighter == "Sung Jin Woo":
            player_hp = float('inf')
            attack_power = float('inf')
            item_name = None
            item_bonus = 0
        elif fighter == "Goku":
            if owned_fighters["Goku"] == 999:
                player_hp = float('inf')
                attack_power = float('inf')
            else:
                player_hp = 5000
                attack_power = float('inf')
            item_name = None
            item_bonus = 0
        else:
            player_hp = 10 + (level - 1) * 2
            item_name = equipped_items.get(fighter)
            item_bonus = 0
            if item_name and item_name in owned_items:
                item_bonus = all_items[item_name]["base_bonus"] + (owned_items[item_name] - 1)
            attack_power = 3 + (level - 1) + item_bonus

        attack_name = equipped_attacks.get(fighter, None)
        battle_stats[fighter]["battles"] += 1

        print(f"\n=== Battle ===")
        print(f"Your wins: {wins} | Your losses: {losses}")
        if (fighter == "Goku" and owned_fighters["Goku"] == 999) or fighter == "Sung Jin Woo":
            print("You have INFINITE HP. Enemy has {} HP.".format(enemy_hp))
        else:
            print(f"You have {player_hp} HP. Enemy has {enemy_hp} HP.")
        if fighter == "Goku" or fighter == "Sung Jin Woo":
            print("Equipped item: None (Doesn't need items!)")
        else:
            print(f"Equipped item: {item_name if item_name else 'None'} (Bonus: {item_bonus})")
        print(f"Equipped attack: {attack_name if attack_name else 'None'}")

        while player_hp > 0 and enemy_hp > 0:
            print("Choose your action:")
            print("1. Attack")
            print("2. Defend")
            if attack_name:
                print("3. Use Attack")
                print("4. Quit Battle")
            else:
                print("3. Quit Battle")
            action = input("Action: ")
            if action == "1":
                print(f"You attack the enemy! (Power: {attack_power})")
                enemy_hp -= attack_power
            elif action == "2":
                print("You defend! Enemy's attack does less damage.")
            elif action == "3" and attack_name:
                if attack_name == "Kamehameha":
                    print(f"Goku uses Kamehameha! (Power: 50000)")
                    enemy_hp -= all_attacks["Kamehameha"]["power"]
                else:
                    attack_level = owned_attacks[attack_name]
                    power = all_attacks[attack_name]["power"] + (attack_level - 1) * 500
                    print(f"{fighter} uses {attack_name}! (Power: {power})")
                    enemy_hp -= power
            elif (action == "3" and not attack_name) or (action == "4" and attack_name):
                print("You left the battle.")
                show_menu()
                return
            else:
                print("Invalid action. You miss your turn!")

            if enemy_hp <= 0:
                print("You defeated the enemy!")
                coins += 10
                print("You earned 10 coins!")
                wins += 1
                battle_stats[fighter]["wins"] += 1
                check_achievements()
                check_quests("win")
                # Sung Jin Woo raises a guard
                if fighter == "Sung Jin Woo":
                    guard_name = f"Shadow Guard {wins}"
                    if guard_name not in owned_fighters:
                        owned_fighters[guard_name] = 1
                        battle_stats[guard_name] = {"battles": 0, "wins": 0, "losses": 0}
                        sung_guards.add(guard_name)
                        print(f"Sung Jin Woo raises the enemy as his guard: {guard_name}!")
                break

            # Enemy attacks
            if action == "2":
                print("Enemy attacks you, but you defended!")
                player_hp -= 1
            else:
                print("Enemy attacks you!")
                player_hp -= enemy_attack

            if player_hp <= 0:
                print("You were defeated by the enemy!")
                losses += 1
                battle_stats[fighter]["losses"] += 1

        again = input("\nDo you want to battle again with this fighter? (y/n): ").strip().lower()
        if again != "y":
            keep_playing = False
            show_menu()
            return

def open_shop():
    global coins
    print("\n=== Shop ===")
    print(f"You have {coins} coins.")
    print("1. Buy Fighters")
    print("2. Upgrade Fighters")
    print("3. Buy Items")
    print("4. Buy Attacks")
    print("5. Back to menu")
    choice = input("Choose an option: ")
    if choice == "1":
        buy_fighters()
    elif choice == "2":
        upgrade_fighters()
    elif choice == "3":
        items_shop()
    elif choice == "4":
        attacks_shop()
    elif choice == "5":
        show_menu()
    else:
        print("Invalid option.")
        open_shop()

def buy_fighters():
    global coins, secret_unlocked
    fighters_list = all_fighters.copy()
    if secret_unlocked and secret_fighter not in fighters_list:
        fighters_list.append(secret_fighter)
        fighter_prices[secret_fighter] = 0
    available_fighters = [f for f in fighters_list if f not in owned_fighters]
    if not available_fighters:
        print("No fighters available to buy.")
        input("Press Enter to return to shop...")
        open_shop()
        return
    print("\n=== Buy Fighters ===")
    for idx, name in enumerate(available_fighters, 1):
        print(f"{idx}. Buy {name} ({fighter_prices[name]} coins)")
    print(f"{len(available_fighters)+1}. Back to shop")
    choice = input("Choose an option: ")
    if not secret_unlocked and choice.lower().strip() == secret_code:
        secret_unlocked = True
        print("You have unlocked Sung Jin Woo! He will now appear in the shop.")
        buy_fighters()
        return
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(available_fighters):
            fighter = available_fighters[choice-1]
            price = fighter_prices[fighter]
            if coins >= price:
                coins -= price
                owned_fighters[fighter] = 1
                battle_stats[fighter] = {"battles": 0, "wins": 0, "losses": 0}
                print(f"You bought {fighter}!")
                check_quests("buy_fighter")
            else:
                print("Not enough coins!")
            buy_fighters()
        elif choice == len(available_fighters)+1:
            open_shop()
        else:
            print("Invalid option.")
            buy_fighters()
    else:
        print("Invalid input.")
        buy_fighters()

def upgrade_fighters():
    global coins
    print("\n=== Upgrade Fighters ===")
    for idx, (fighter, level) in enumerate(owned_fighters.items(), 1):
        if fighter == "Goku" or fighter == "Sung Jin Woo":
            maxed = "(NOT UPGRADABLE)"
        else:
            next_cost = 10 + (level - 1) * 5
            maxed = "(MAX)" if level >= 20 else f"- Upgrade cost: {next_cost} coins"
        print(f"{idx}. {fighter} (Level {level}) {maxed}")
    print(f"{len(owned_fighters)+1}. Back to shop")
    choice = input("Choose a fighter to upgrade: ")
    # Goku 999 cheat
    if choice == "999":
        if "Goku" in owned_fighters:
            owned_fighters["Goku"] = 999
            print("Goku upgraded to level 999! (Infinite health and power in battle!)")
        else:
            print("You don't own Goku!")
        upgrade_fighters()
        return
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(owned_fighters):
            fighter = list(owned_fighters.keys())[choice-1]
            if fighter == "Goku" or fighter == "Sung Jin Woo":
                print(f"{fighter} cannot be upgraded!")
                upgrade_fighters()
                return
            level = owned_fighters[fighter]
            upgrade_cost = 10 + (level - 1) * 5
            if level >= 20:
                print(f"{fighter} is already at max level!")
            elif coins >= upgrade_cost:
                owned_fighters[fighter] += 1
                coins -= upgrade_cost
                print(f"{fighter} upgraded to level {owned_fighters[fighter]}! (Cost: {upgrade_cost} coins)")
            else:
                print("Not enough coins!")
            upgrade_fighters()
        elif choice == len(owned_fighters)+1:
            open_shop()
        else:
            print("Invalid option.")
            upgrade_fighters()
    else:
        print("Invalid input.")
        upgrade_fighters()

# === ITEMS SYSTEM ===

def items_menu():
    print("\n=== Items Menu ===")
    print("1. Equip Item")
    print("2. Upgrade Item")
    print("3. Equip Attack")
    print("4. Upgrade Attack")
    print("5. Back to menu")
    choice = input("Choose an option: ")
    if choice == "1":
        equip_item()
    elif choice == "2":
        upgrade_items()
    elif choice == "3":
        equip_attack()
    elif choice == "4":
        upgrade_attacks()
    elif choice == "5":
        show_menu()
    else:
        print("Invalid option.")
        items_menu()

def items_shop():
    global coins
    available_items = [item for item in all_items if item not in owned_items]
    if not available_items:
        print("No new items available to buy.")
        input("Press Enter to return to shop...")
        open_shop()
        return
    print("\n=== Buy Items ===")
    for idx, name in enumerate(available_items, 1):
        print(f"{idx}. Buy {name} (Bonus: {all_items[name]['base_bonus']}, Price: {all_items[name]['price']} coins)")
    print(f"{len(available_items)+1}. Back to shop")
    choice = input("Choose an option: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(available_items):
            item = available_items[choice-1]
            price = all_items[item]["price"]
            if coins >= price:
                coins -= price
                owned_items[item] = 1
                print(f"You bought {item}!")
            else:
                print("Not enough coins!")
            items_shop()
        elif choice == len(available_items)+1:
            open_shop()
        else:
            print("Invalid option.")
            items_shop()
    else:
        print("Invalid input.")
        items_shop()

def attacks_shop():
    global coins
    available_attacks = [a for a in all_attacks if a not in owned_attacks]
    if not available_attacks:
        print("No new attacks available to buy.")
        input("Press Enter to return to shop...")
        open_shop()
        return
    print("\n=== Buy Attacks ===")
    for idx, name in enumerate(available_attacks, 1):
        print(f"{idx}. Buy {name} (Power: {all_attacks[name]['power']}, Price: {all_attacks[name]['price']} coins)")
    print(f"{len(available_attacks)+1}. Back to shop")
    choice = input("Choose an option: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(available_attacks):
            attack = available_attacks[choice-1]
            price = all_attacks[attack]["price"]
            if coins >= price:
                coins -= price
                owned_attacks[attack] = 1
                print(f"You bought {attack}!")
            else:
                print("Not enough coins!")
            attacks_shop()
        elif choice == len(available_attacks)+1:
            open_shop()
        else:
            print("Invalid option.")
            attacks_shop()
    else:
        print("Invalid input.")
        attacks_shop()

def upgrade_attacks():
    global coins
    upgradable_attacks = [a for a in owned_attacks if all_attacks[a].get("upgradable", False)]
    if not upgradable_attacks:
        print("No upgradable attacks owned!")
        items_menu()
        return
    print("\n=== Upgrade Attacks ===")
    for idx, attack in enumerate(upgradable_attacks, 1):
        level = owned_attacks[attack]
        upgrade_cost = 500 + (level - 1) * 300
        print(f"{idx}. {attack} (Level {level}) - Upgrade cost: {upgrade_cost} coins")
    print(f"{len(upgradable_attacks)+1}. Back to items menu")
    choice = input("Choose an attack to upgrade: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(upgradable_attacks):
            attack = upgradable_attacks[choice-1]
            level = owned_attacks[attack]
            upgrade_cost = 500 + (level - 1) * 300
            if coins >= upgrade_cost:
                owned_attacks[attack] += 1
                coins -= upgrade_cost
                print(f"{attack} upgraded to level {owned_attacks[attack]}! (Cost: {upgrade_cost} coins)")
            else:
                print("Not enough coins!")
            upgrade_attacks()
        elif choice == len(upgradable_attacks)+1:
            items_menu()
        else:
            print("Invalid option.")
            upgrade_attacks()
    else:
        print("Invalid input.")
        upgrade_attacks()

def equip_item():
    if not owned_items:
        print("You don't own any items yet!")
        items_menu()
        return
    print("\n=== Equip Item ===")
    for idx, fighter in enumerate(owned_fighters, 1):
        equipped = equipped_items.get(fighter, "None")
        print(f"{idx}. {fighter} (Equipped: {equipped})")
    choice = input("Choose a fighter to equip an item: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(owned_fighters):
            fighter = list(owned_fighters.keys())[choice-1]
            # Show owned items
            print("Owned items:")
            for i, item in enumerate(owned_items, 1):
                print(f"{i}. {item} (Level {owned_items[item]})")
            item_choice = input("Choose item number to equip: ")
            if item_choice.isdigit():
                item_choice = int(item_choice)
                if 1 <= item_choice <= len(owned_items):
                    item = list(owned_items.keys())[item_choice-1]
                    equipped_items[fighter] = item
                    print(f"{fighter} equipped with {item}!")
                else:
                    print("Invalid item.")
            else:
                print("Invalid input.")
        else:
            print("Invalid fighter.")
    else:
        print("Invalid input.")
    items_menu()

def equip_attack():
    if not owned_attacks:
        print("You don't own any attacks yet!")
        items_menu()
        return
    print("\n=== Equip Attack ===")
    for idx, fighter in enumerate(owned_fighters, 1):
        equipped = equipped_attacks.get(fighter, "None")
        print(f"{idx}. {fighter} (Equipped attack: {equipped})")
    choice = input("Choose a fighter to equip an attack: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(owned_fighters):
            fighter = list(owned_fighters.keys())[choice-1]
            available = []
            for attack in owned_attacks:
                if fighter == "Goku":
                    available.append(attack)
                elif attack != "Kamehameha":
                    available.append(attack)
            if not available:
                print("No attacks available for this fighter.")
                items_menu()
                return
            print("Owned attacks:")
            for i, attack in enumerate(available, 1):
                print(f"{i}. {attack} (Level {owned_attacks[attack]})")
            attack_choice = input("Choose attack number to equip: ")
            if attack_choice.isdigit():
                attack_choice = int(attack_choice)
                if 1 <= attack_choice <= len(available):
                    attack = available[attack_choice-1]
                    equipped_attacks[fighter] = attack
                    print(f"{fighter} equipped with {attack}!")
                    check_quests("equip_attack")
                else:
                    print("Invalid attack.")
            else:
                print("Invalid input.")
        else:
            print("Invalid fighter.")
    else:
        print("Invalid input.")
    items_menu()

def upgrade_items():
    global coins
    if not owned_items:
        print("You don't own any items yet!")
        items_menu()
        return
    print("\n=== Upgrade Items ===")
    for idx, (item, level) in enumerate(owned_items.items(), 1):
        upgrade_cost = 15 + (level - 1) * 10
        maxed = "(MAX)" if level >= 20 else f"- Upgrade cost: {upgrade_cost} coins"
        print(f"{idx}. {item} (Level {level}) {maxed}")
    print(f"{len(owned_items)+1}. Back to items menu")
    choice = input("Choose an item to upgrade: ")
    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(owned_items):
            item = list(owned_items.keys())[choice-1]
            level = owned_items[item]
            upgrade_cost = 15 + (level - 1) * 10
            if level >= 20:
                print(f"{item} is already at max level!")
            elif coins >= upgrade_cost:
                owned_items[item] += 1
                coins -= upgrade_cost
                print(f"{item} upgraded to level {owned_items[item]}! (Cost: {upgrade_cost} coins)")
                check_quests("upgrade_item")
            else:
                print("Not enough coins!")
            upgrade_items()
        elif choice == len(owned_items)+1:
            items_menu()
        else:
            print("Invalid option.")
            upgrade_items()
    else:
        print("Invalid input.")
        upgrade_items()

def show_fighters():
    print("\n=== Your Fighters ===")
    for fighter, level in owned_fighters.items():
        stats = battle_stats.get(fighter, {"battles": 0, "wins": 0, "losses": 0})
        item = equipped_items.get(fighter, "None")
        attack = equipped_attacks.get(fighter, "None")
        print(f"- {fighter} (Level {level}) | Item: {item} | Attack: {attack} | Battles: {stats['battles']} | Wins: {stats['wins']} | Losses: {stats['losses']}")
    input("Press Enter to return to menu...")
    show_menu()

def show_options():
    print("\n=== Options ===")
    print("1. Debug")
    print("2. Back to menu")
    choice = input("Choose an option: ")
    if choice == "1":
        show_debug()
    else:
        show_menu()

def show_debug():
    password = input("Enter debug password: ")
    if password != "2012":
        print("Incorrect password.")
        show_options()
        return
    global coins, owned_fighters, battle_stats, owned_items, owned_attacks
    print("\n=== Debug Menu ===")
    print("1. Unlock all fighters")
    print("2. Max coins (9999)")
    print("3. Unlock all items")
    print("4. Unlock all attacks")
    print("5. Back to options")
    choice = input("Choose an option: ")
    if choice == "1":
        for fighter in all_fighters:
            if fighter not in owned_fighters:
                owned_fighters[fighter] = 1
                battle_stats[fighter] = {"battles": 0, "wins": 0, "losses": 0}
        print("All fighters unlocked!")
        show_debug()
    elif choice == "2":
        coins = 9999
        print("Coins set to 9999!")
        show_debug()
    elif choice == "3":
        for item in all_items:
            owned_items[item] = 1
        print("All items unlocked!")
        show_debug()
    elif choice == "4":
        for attack in all_attacks:
            owned_attacks[attack] = 1
        print("All attacks unlocked!")
        show_debug()
    else:
        show_options()

show_menu()
